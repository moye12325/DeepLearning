network: MLP(
  (layer1): Linear(in_features=470, out_features=256, bias=True)
  (layer2): Linear(in_features=256, out_features=64, bias=True)
  (out): Linear(in_features=64, out_features=1, bias=True)
)
<xml><var name="F" type="module" qualifier="builtins" value="%3Cmodule %27torch.nn.functional%27 from %27C%3A%5C%5CUsers%5C%5C19423%5C%5C.conda%5C%5Cenvs%5C%5Cnlp%5C%5Clib%5C%5Csite-packages%5C%5Ctorch%5C%5Cnn%5C%5Cfunctional.py%27&gt;" isContainer="True" />
<var name="In" type="list" qualifier="builtins" value="%5B%27%27%2C %27import torch%5Cnimport pandas as pd%5Cnimport torch.nn as nn%5Cnfrom torch.nn import functional as F%5Cnfrom d2l import torch as d2l%5Cnfrom tqdm import tqdm%5Cnimport numpy as np%5Cnfrom torch.utils import data%5Cnimport wandb%5Cn%5CnNUM_SAVE = 50%5Cnnet_list = %22in-&gt;256-&gt;64%22%5Cn%5Cnclass MLP%28nn.Module%29%3A%5Cn    def __init__%28self%2C in_features%29%3A%5Cn        super%28%29.__init__%28%29%5Cn        self.layer1 = nn.Linear%28in_features%2C256%29%5Cn        self.layer2 = nn.Linear%28256%2C64%29%5Cn        self.out = nn.Linear%2864%2C1%29%5Cn%5Cn    def forward%28self%2C X%29%3A%5Cn        X = F.relu%28self.layer1%28X%29%29%5Cn        X = F.relu%28self.layer2%28X%29%29%5Cn        return self.out%28X%29%5Cndevice = torch.device%28%22cuda%3A0%22 if torch.cuda.is_available%28%29 else %22cpu%22%29%5Cn%23 device = torch.device%28%22cpu%22%29%5Cntest_data = pd.read_csv%28%5C%27test.csv%5C%27%29%5Cntrain_data = pd.read_csv%28%5C%27train.csv%5C%27%29%5Cnprint%28%22train_data and test_data shape%22%2Ctrain_data.shape%2Ctest_data.shape%29%5Cn%5Cn%23 %E5%8E%BB%E6%8E%89%E5%86%97%E4%BD%99%E6%95%B0%E6%8D%AE%5Cnredundant_cols = %5B%5C%27Address%5C%27%2C %5C%27Summary%5C%27%2C %5C%27City%5C%27%2C %5C%27State%5C%27%5D%5Cnfor c in redundant_cols%3A%5Cn    del test_data%5Bc%5D%2C train_..." isContainer="True" shape="4" isIPythonHidden="True" />
<var name="MLP" type="type" qualifier="builtins" value="%3Cclass %27__main__.MLP%27&gt;" isContainer="True" />
<var name="NUM_SAVE" type="int" qualifier="builtins" value="50" />
<var name="Out" type="dict" qualifier="builtins" value="%7B%7D" isContainer="True" shape="0" isIPythonHidden="True" />
<var name="_" type="str" qualifier="builtins" value="" isIPythonHidden="True" />
<var name="__" type="str" qualifier="builtins" value="" isIPythonHidden="True" />
<var name="___" type="str" qualifier="builtins" value="" isIPythonHidden="True" />
<var name="__builtin__" type="module" qualifier="builtins" value="%3Cmodule %27builtins%27 %28built-in%29&gt;" isContainer="True" isIPythonHidden="True" />
<var name="__builtins__" type="module" qualifier="builtins" value="%3Cmodule %27builtins%27 %28built-in%29&gt;" isContainer="True" isIPythonHidden="True" />
<var name="__doc__" type="str" qualifier="builtins" value="Automatically created module for IPython interactive environment" isIPythonHidden="True" />
<var name="__loader__" type="NoneType" qualifier="builtins" value="None" isIPythonHidden="True" />
<var name="__name__" type="str" qualifier="builtins" value="__main__" isIPythonHidden="True" />
<var name="__package__" type="NoneType" qualifier="builtins" value="None" isIPythonHidden="True" />
<var name="__spec__" type="NoneType" qualifier="builtins" value="None" isIPythonHidden="True" />
<var name="_dh" type="list" qualifier="builtins" value="%5BWindowsPath%28%27D%3A/Projects/DeepLearning/Demo%27%29%5D" isContainer="True" shape="1" isIPythonHidden="True" />
<var name="_i" type="str" qualifier="builtins" value="import torch%0Aimport pandas as pd%0Aimport torch.nn as nn%0Afrom torch.nn import functional as F%0Afrom d2l import torch as d2l%0Afrom tqdm import tqdm%0Aimport numpy as np%0Afrom torch.utils import data%0Aimport wandb%0A%0ANUM_SAVE = 50%0Anet_list = %22in-&gt;256-&gt;64%22%0A%0Aclass MLP%28nn.Module%29%3A%0A    def __init__%28self%2C in_features%29%3A%0A        super%28%29.__init__%28%29%0A        self.layer1 = nn.Linear%28in_features%2C256%29%0A        self.layer2 = nn.Linear%28256%2C64%29%0A        self.out = nn.Linear%2864%2C1%29%0A%0A    def forward%28self%2C X%29%3A%0A        X = F.relu%28self.layer1%28X%29%29%0A        X = F.relu%28self.layer2%28X%29%29%0A        return self.out%28X%29%0Adevice = torch.device%28%22cuda%3A0%22 if torch.cuda.is_available%28%29 else %22cpu%22%29%0A%23 device = torch.device%28%22cpu%22%29%0Atest_data = pd.read_csv%28%27test.csv%27%29%0Atrain_data = pd.read_csv%28%27train.csv%27%29%0Aprint%28%22train_data and test_data shape%22%2Ctrain_data.shape%2Ctest_data.shape%29%0A%0A%23 %E5%8E%BB%E6%8E%89%E5%86%97%E4%BD%99%E6%95%B0%E6%8D%AE%0Aredundant_cols = %5B%27Address%27%2C %27Summary%27%2C %27City%27%2C %27State%27%5D%0Afor c in redundant_cols%3A%0A    del test_data%5Bc%5D%2C train_data%5Bc%5D%0A%0A%23 %E6%95%B0%E6%8D%AE%E9%A2%84%E5%A4%84%E7%90%86%0Alarge_vel_cols = %5B%27Lot%27%2C %27Total in..." isIPythonHidden="True" />
<var name="_i1" type="str" qualifier="builtins" value="import torch%0Aimport pandas as pd%0Aimport torch.nn as nn%0Afrom torch.nn import functional as F%0Afrom d2l import torch as d2l%0Afrom tqdm import tqdm%0Aimport numpy as np%0Afrom torch.utils import data%0Aimport wandb%0A%0ANUM_SAVE = 50%0Anet_list = %22in-&gt;256-&gt;64%22%0A%0Aclass MLP%28nn.Module%29%3A%0A    def __init__%28self%2C in_features%29%3A%0A        super%28%29.__init__%28%29%0A        self.layer1 = nn.Linear%28in_features%2C256%29%0A        self.layer2 = nn.Linear%28256%2C64%29%0A        self.out = nn.Linear%2864%2C1%29%0A%0A    def forward%28self%2C X%29%3A%0A        X = F.relu%28self.layer1%28X%29%29%0A        X = F.relu%28self.layer2%28X%29%29%0A        return self.out%28X%29%0Adevice = torch.device%28%22cuda%3A0%22 if torch.cuda.is_available%28%29 else %22cpu%22%29%0A%23 device = torch.device%28%22cpu%22%29%0Atest_data = pd.read_csv%28%27test.csv%27%29%0Atrain_data = pd.read_csv%28%27train.csv%27%29%0Aprint%28%22train_data and test_data shape%22%2Ctrain_data.shape%2Ctest_data.shape%29%0A%0A%23 %E5%8E%BB%E6%8E%89%E5%86%97%E4%BD%99%E6%95%B0%E6%8D%AE%0Aredundant_cols = %5B%27Address%27%2C %27Summary%27%2C %27City%27%2C %27State%27%5D%0Afor c in redundant_cols%3A%0A    del test_data%5Bc%5D%2C train_data%5Bc%5D%0A%0A%23 %E6%95%B0%E6%8D%AE%E9%A2%84%E5%A4%84%E7%90%86%0Alarge_vel_cols = %5B%27Lot%27%2C %27Total in..." isIPythonHidden="True" />
<var name="_i2" type="str" qualifier="builtins" value="import torch%0Aimport pandas as pd%0Aimport torch.nn as nn%0Afrom torch.nn import functional as F%0Afrom d2l import torch as d2l%0Afrom tqdm import tqdm%0Aimport numpy as np%0Afrom torch.utils import data%0Aimport wandb%0A%0ANUM_SAVE = 50%0Anet_list = %22in-&gt;256-&gt;64%22%0A%0Aclass MLP%28nn.Module%29%3A%0A    def __init__%28self%2C in_features%29%3A%0A        super%28%29.__init__%28%29%0A        self.layer1 = nn.Linear%28in_features%2C256%29%0A        self.layer2 = nn.Linear%28256%2C64%29%0A        self.out = nn.Linear%2864%2C1%29%0A%0A    def forward%28self%2C X%29%3A%0A        X = F.relu%28self.layer1%28X%29%29%0A        X = F.relu%28self.layer2%28X%29%29%0A        return self.out%28X%29%0Adevice = torch.device%28%22cuda%3A0%22 if torch.cuda.is_available%28%29 else %22cpu%22%29%0A%23 device = torch.device%28%22cpu%22%29%0Atest_data = pd.read_csv%28%27test.csv%27%29%0Atrain_data = pd.read_csv%28%27train.csv%27%29%0Aprint%28%22train_data and test_data shape%22%2Ctrain_data.shape%2Ctest_data.shape%29%0A%0A%23 %E5%8E%BB%E6%8E%89%E5%86%97%E4%BD%99%E6%95%B0%E6%8D%AE%0Aredundant_cols = %5B%27Address%27%2C %27Summary%27%2C %27City%27%2C %27State%27%5D%0Afor c in redundant_cols%3A%0A    del test_data%5Bc%5D%2C train_data%5Bc%5D%0A%0A%23 %E6%95%B0%E6%8D%AE%E9%A2%84%E5%A4%84%E7%90%86%0Alarge_vel_cols = %5B%27Lot%27%2C %27Total in..." isIPythonHidden="True" />
<var name="_i3" type="str" qualifier="builtins" value="import torch%0Aimport pandas as pd%0Aimport torch.nn as nn%0Afrom torch.nn import functional as F%0Afrom d2l import torch as d2l%0Afrom tqdm import tqdm%0Aimport numpy as np%0Afrom torch.utils import data%0Aimport wandb%0A%0ANUM_SAVE = 50%0Anet_list = %22in-&gt;256-&gt;64%22%0A%0Aclass MLP%28nn.Module%29%3A%0A    def __init__%28self%2C in_features%29%3A%0A        super%28%29.__init__%28%29%0A        self.layer1 = nn.Linear%28in_features%2C256%29%0A        self.layer2 = nn.Linear%28256%2C64%29%0A        self.out = nn.Linear%2864%2C1%29%0A%0A    def forward%28self%2C X%29%3A%0A        X = F.relu%28self.layer1%28X%29%29%0A        X = F.relu%28self.layer2%28X%29%29%0A        return self.out%28X%29%0Adevice = torch.device%28%22cuda%3A0%22 if torch.cuda.is_available%28%29 else %22cpu%22%29%0A%23 device = torch.device%28%22cpu%22%29%0Atest_data = pd.read_csv%28%27test.csv%27%29%0Atrain_data = pd.read_csv%28%27train.csv%27%29%0Aprint%28%22train_data and test_data shape%22%2Ctrain_data.shape%2Ctest_data.shape%29%0A%0A%23 %E5%8E%BB%E6%8E%89%E5%86%97%E4%BD%99%E6%95%B0%E6%8D%AE%0Aredundant_cols = %5B%27Address%27%2C %27Summary%27%2C %27City%27%2C %27State%27%5D%0Afor c in redundant_cols%3A%0A    del test_data%5Bc%5D%2C train_data%5Bc%5D%0A%0A%23 %E6%95%B0%E6%8D%AE%E9%A2%84%E5%A4%84%E7%90%86%0Alarge_vel_cols = %5B%27Lot%27%2C %27Total in..." isIPythonHidden="True" />
<var name="_ih" type="list" qualifier="builtins" value="%5B%27%27%2C %27import torch%5Cnimport pandas as pd%5Cnimport torch.nn as nn%5Cnfrom torch.nn import functional as F%5Cnfrom d2l import torch as d2l%5Cnfrom tqdm import tqdm%5Cnimport numpy as np%5Cnfrom torch.utils import data%5Cnimport wandb%5Cn%5CnNUM_SAVE = 50%5Cnnet_list = %22in-&gt;256-&gt;64%22%5Cn%5Cnclass MLP%28nn.Module%29%3A%5Cn    def __init__%28self%2C in_features%29%3A%5Cn        super%28%29.__init__%28%29%5Cn        self.layer1 = nn.Linear%28in_features%2C256%29%5Cn        self.layer2 = nn.Linear%28256%2C64%29%5Cn        self.out = nn.Linear%2864%2C1%29%5Cn%5Cn    def forward%28self%2C X%29%3A%5Cn        X = F.relu%28self.layer1%28X%29%29%5Cn        X = F.relu%28self.layer2%28X%29%29%5Cn        return self.out%28X%29%5Cndevice = torch.device%28%22cuda%3A0%22 if torch.cuda.is_available%28%29 else %22cpu%22%29%5Cn%23 device = torch.device%28%22cpu%22%29%5Cntest_data = pd.read_csv%28%5C%27test.csv%5C%27%29%5Cntrain_data = pd.read_csv%28%5C%27train.csv%5C%27%29%5Cnprint%28%22train_data and test_data shape%22%2Ctrain_data.shape%2Ctest_data.shape%29%5Cn%5Cn%23 %E5%8E%BB%E6%8E%89%E5%86%97%E4%BD%99%E6%95%B0%E6%8D%AE%5Cnredundant_cols = %5B%5C%27Address%5C%27%2C %5C%27Summary%5C%27%2C %5C%27City%5C%27%2C %5C%27State%5C%27%5D%5Cnfor c in redundant_cols%3A%5Cn    del test_data%5Bc%5D%2C train_..." isContainer="True" shape="4" isIPythonHidden="True" />
<var name="_ii" type="str" qualifier="builtins" value="import torch%0Aimport pandas as pd%0Aimport torch.nn as nn%0Afrom torch.nn import functional as F%0Afrom d2l import torch as d2l%0Afrom tqdm import tqdm%0Aimport numpy as np%0Afrom torch.utils import data%0Aimport wandb%0A%0ANUM_SAVE = 50%0Anet_list = %22in-&gt;256-&gt;64%22%0A%0Aclass MLP%28nn.Module%29%3A%0A    def __init__%28self%2C in_features%29%3A%0A        super%28%29.__init__%28%29%0A        self.layer1 = nn.Linear%28in_features%2C256%29%0A        self.layer2 = nn.Linear%28256%2C64%29%0A        self.out = nn.Linear%2864%2C1%29%0A%0A    def forward%28self%2C X%29%3A%0A        X = F.relu%28self.layer1%28X%29%29%0A        X = F.relu%28self.layer2%28X%29%29%0A        return self.out%28X%29%0Adevice = torch.device%28%22cuda%3A0%22 if torch.cuda.is_available%28%29 else %22cpu%22%29%0A%23 device = torch.device%28%22cpu%22%29%0Atest_data = pd.read_csv%28%27test.csv%27%29%0Atrain_data = pd.read_csv%28%27train.csv%27%29%0Aprint%28%22train_data and test_data shape%22%2Ctrain_data.shape%2Ctest_data.shape%29%0A%0A%23 %E5%8E%BB%E6%8E%89%E5%86%97%E4%BD%99%E6%95%B0%E6%8D%AE%0Aredundant_cols = %5B%27Address%27%2C %27Summary%27%2C %27City%27%2C %27State%27%5D%0Afor c in redundant_cols%3A%0A    del test_data%5Bc%5D%2C train_data%5Bc%5D%0A%0A%23 %E6%95%B0%E6%8D%AE%E9%A2%84%E5%A4%84%E7%90%86%0Alarge_vel_cols = %5B%27Lot%27%2C %27Total in..." isIPythonHidden="True" />
<var name="_iii" type="str" qualifier="builtins" value="" isIPythonHidden="True" />
<var name="_oh" type="dict" qualifier="builtins" value="%7B%7D" isContainer="True" shape="0" isIPythonHidden="True" />
<var name="_pydevd_bundle" type="module" qualifier="builtins" value="%3Cmodule %27_pydevd_bundle%27 from %27C%3A%5C%5CProgram Files%5C%5CJetBrains%5C%5CPyCharm 2022.1%5C%5Cplugins%5C%5Cpython%5C%5Chelpers%5C%5Cpydev%5C%5C_pydevd_bundle%5C%5C__init__.py%27&gt;" isContainer="True" />
<var name="all_features" type="DataFrame" qualifier="pandas.core.frame" value="Year built       Lot  Bathrooms  Full bathrooms  %5C %5B0        0.048876 -5.408445  -2.061769       -0.107328   %5D %5B1       -0.283288 -0.447417  -0.337084       -0.107328   %5D %5B2       -0.036097  0.083895   0.525258       -1.170321   %5D %5B3       -0.121069 -0.528027   0.525258        0.955665   %5D %5B4       -0.445508 -0.528027  -0.337084       -0.107328   %5D %5B...           ...       ...        ...             ...   %5D %5B31621    0.435112 -1.041401   3.112286       -1.170321   %5D %5B31622    0.056600 -1.041401  -0.337084       -1.170321   %5D %5B31623    0.164747 -5.860146   0.525258       -0.107328   %5D %5B31624    0.164747 -5.860146   0.525258       -0.107328   %5D %5B31625    0.234269 -5.860146  -0.337084       -2.233314   %5D %5B%5D %5B       Total interior livable area  Total spaces  Garage spaces  %5C%5D %5B0                       -13.488061     -0.136007      -0.124106   %5D %5B1                        -1.261842     -0.063225      -0.050997   %5D %5B2                        -0.702327     -0.136007      -0.124106   %5D %5B3                         0.943175 ...%5D" isContainer="True" shape="(79065, 470)" />
<var name="batch_size" type="int" qualifier="builtins" value="256" />
<var name="c" type="str" qualifier="builtins" value="Last Sold Price" />
<var name="criterion" type="MSELoss" qualifier="torch.nn.modules.loss" value="MSELoss%28%29" isContainer="True" />
<var name="d2l" type="module" qualifier="builtins" value="%3Cmodule %27d2l.torch%27 from %27C%3A%5C%5CUsers%5C%5C19423%5C%5C.conda%5C%5Cenvs%5C%5Cnlp%5C%5Clib%5C%5Csite-packages%5C%5Cd2l%5C%5Ctorch.py%27&gt;" isContainer="True" />
<var name="data" type="module" qualifier="builtins" value="%3Cmodule %27torch.utils.data%27 from %27C%3A%5C%5CUsers%5C%5C19423%5C%5C.conda%5C%5Cenvs%5C%5Cnlp%5C%5Clib%5C%5Csite-packages%5C%5Ctorch%5C%5Cutils%5C%5Cdata%5C%5C__init__.py%27&gt;" isContainer="True" />
<var name="device" type="device" qualifier="torch" value="cuda%3A0" isContainer="True" />
<var name="exit" type="ZMQExitAutocall" qualifier="IPython.core.autocall" value="%3CIPython.core.autocall.ZMQExitAutocall object at 0x0000016686577760&gt;" isContainer="True" isIPythonHidden="True" />
<var name="features" type="list" qualifier="builtins" value="%5B%27Year built%27%2C %27Lot%27%2C %27Bathrooms%27%2C %27Full bathrooms%27%2C %27Total interior livable area%27%2C %27Total spaces%27%2C %27Garage spaces%27%2C %27Elementary School Score%27%2C %27Elementary School Distance%27%2C %27Middle School Score%27%2C %27Middle School Distance%27%2C %27High School Score%27%2C %27High School Distance%27%2C %27Tax assessed value%27%2C %27Annual tax amount%27%2C %27Listed Price%27%2C %27Last Sold Price%27%2C %27Type%27%2C %27Bedrooms%27%5D" isContainer="True" shape="19" />
<var name="get_ipython" type="method" qualifier="builtins" value="%3Cbound method InteractiveShell.get_ipython of %3Cipykernel.zmqshell.ZMQInteractiveShell object at 0x0000016686577250&gt;&gt;" isContainer="True" isIPythonHidden="True" />
<var name="in_features" type="int" qualifier="builtins" value="470" />
<var name="in_object" type="str" qualifier="builtins" value="Parking features" />
<var name="k" type="int" qualifier="builtins" value="5" />
<var name="large_vel_cols" type="list" qualifier="builtins" value="%5B%27Lot%27%2C %27Total interior livable area%27%2C %27Tax assessed value%27%2C %27Annual tax amount%27%2C %27Listed Price%27%2C %27Last Sold Price%27%5D" isContainer="True" shape="6" />
<var name="load_array" type="function" qualifier="builtins" value="%3Cfunction load_array at 0x00000166B021A040&gt;" isContainer="True" />
<var name="log_rmse" type="function" qualifier="builtins" value="%3Cfunction log_rmse at 0x00000166ADD09EE0&gt;" isContainer="True" />
<var name="lr" type="float" qualifier="builtins" value="0.005" />
<var name="n_train" type="int" qualifier="builtins" value="47439" />
<var name="net" type="MLP" qualifier="__main__" value="MLP%28%0A  %28layer1%29%3A Linear%28in_features=470%2C out_features=256%2C bias=True%29%0A  %28layer2%29%3A Linear%28in_features=256%2C out_features=64%2C bias=True%29%0A  %28out%29%3A Linear%28in_features=64%2C out_features=1%2C bias=True%29%0A%29" isContainer="True" />
<var name="net_list" type="str" qualifier="builtins" value="in-&gt;256-&gt;64" />
<var name="nn" type="module" qualifier="builtins" value="%3Cmodule %27torch.nn%27 from %27C%3A%5C%5CUsers%5C%5C19423%5C%5C.conda%5C%5Cenvs%5C%5Cnlp%5C%5Clib%5C%5Csite-packages%5C%5Ctorch%5C%5Cnn%5C%5C__init__.py%27&gt;" isContainer="True" />
<var name="np" type="module" qualifier="builtins" value="%3Cmodule %27numpy%27 from %27C%3A%5C%5CUsers%5C%5C19423%5C%5C.conda%5C%5Cenvs%5C%5Cnlp%5C%5Clib%5C%5Csite-packages%5C%5Cnumpy%5C%5C__init__.py%27&gt;" isContainer="True" />
<var name="num_epochs" type="int" qualifier="builtins" value="2000" />
<var name="numeric_features" type="Index" qualifier="pandas.core.indexes.base" value="Index%28%5B%27Year built%27%2C %27Lot%27%2C %27Bathrooms%27%2C %27Full bathrooms%27%2C%0A       %27Total interior livable area%27%2C %27Total spaces%27%2C %27Garage spaces%27%2C%0A       %27Elementary School Score%27%2C %27Elementary School Distance%27%2C%0A       %27Middle School Score%27%2C %27Middle School Distance%27%2C %27High School Score%27%2C%0A       %27High School Distance%27%2C %27Tax assessed value%27%2C %27Annual tax amount%27%2C%0A       %27Listed Price%27%2C %27Last Sold Price%27%5D%2C%0A      dtype=%27object%27%29" isContainer="True" shape="(17,)" />
<var name="pd" type="module" qualifier="builtins" value="%3Cmodule %27pandas%27 from %27C%3A%5C%5CUsers%5C%5C19423%5C%5C.conda%5C%5Cenvs%5C%5Cnlp%5C%5Clib%5C%5Csite-packages%5C%5Cpandas%5C%5C__init__.py%27&gt;" isContainer="True" />
<var name="pydev_jupyter_vars" type="module" qualifier="builtins" value="%3Cmodule %27pydev_jupyter_vars%27 from %27C%3A%5C%5CProgram Files%5C%5CJetBrains%5C%5CPyCharm 2022.1%5C%5Cplugins%5C%5Cpython%5C%5Chelpers-pro%5C%5Cjupyter_debug%5C%5Cpydev_jupyter_vars.py%27&gt;" isContainer="True" />
<var name="quit" type="ZMQExitAutocall" qualifier="IPython.core.autocall" value="%3CIPython.core.autocall.ZMQExitAutocall object at 0x0000016686577760&gt;" isContainer="True" isIPythonHidden="True" />
<var name="redundant_cols" type="list" qualifier="builtins" value="%5B%27Address%27%2C %27Summary%27%2C %27City%27%2C %27State%27%5D" isContainer="True" shape="4" />
<var name="remove_imported_pydev_package" type="function" qualifier="builtins" value="%3Cfunction remove_imported_pydev_package at 0x00000166AE714D30&gt;" isContainer="True" />
<var name="sys" type="module" qualifier="builtins" value="%3Cmodule %27sys%27 %28built-in%29&gt;" isContainer="True" />
<var name="test_data" type="DataFrame" qualifier="pandas.core.frame" value="Id          Type  Year built                                Heating  %5C %5B0      47439  SingleFamily      2020.0                                Central   %5D %5B1      47440  SingleFamily      1924.0                            Natural Gas   %5D %5B2      47441  SingleFamily      2020.0                                Central   %5D %5B3      47442  SingleFamily      2020.0                                Central   %5D %5B4      47443  SingleFamily      2017.0                             Forced Air   %5D %5B...      ...           ...         ...                                    ...   %5D %5B31621  79060  SingleFamily      2019.0                                Radiant   %5D %5B31622  79061  SingleFamily      1970.0                Forced Air%2C Natural Gas   %5D %5B31623  79062    VacantLand         NaN                                    NaN   %5D %5B31624  79063     Townhouse      1984.0  Fireplace%28s%29%2C Forced Air%2C Natural Gas   %5D %5B31625  79064     Townhouse      1993.0                             Forced Air   %5D %5B%5D %5B                Cooling    ...%5D" isContainer="True" shape="(31626, 36)" />
<var name="test_features" type="Tensor" qualifier="torch" value="tensor%28%5B%5B 0.4428%2C -1.3982%2C  1.3876%2C  ...%2C  0.0000%2C  0.0000%2C  0.0000%5D%2C%0A        %5B-0.2987%2C  0.1432%2C -0.3371%2C  ...%2C  0.0000%2C  0.0000%2C  0.0000%5D%2C%0A        %5B 0.4428%2C -1.3982%2C  1.3876%2C  ...%2C  0.0000%2C  0.0000%2C  0.0000%5D%2C%0A        ...%2C%0A        %5B 0.1647%2C -5.8601%2C  0.5253%2C  ...%2C  0.0000%2C  0.0000%2C  0.0000%5D%2C%0A        %5B 0.1647%2C -5.8601%2C  0.5253%2C  ...%2C  0.0000%2C  0.0000%2C  0.0000%5D%2C%0A        %5B 0.2343%2C -5.8601%2C -0.3371%2C  ...%2C  0.0000%2C  0.0000%2C  0.0000%5D%5D%29" isContainer="True" shape="(31626, 470)" />
<var name="torch" type="module" qualifier="builtins" value="%3Cmodule %27torch%27 from %27C%3A%5C%5CUsers%5C%5C19423%5C%5C.conda%5C%5Cenvs%5C%5Cnlp%5C%5Clib%5C%5Csite-packages%5C%5Ctorch%5C%5C__init__.py%27&gt;" isContainer="True" />
<var name="tqdm" type="type" qualifier="builtins" value="%3Cclass %27tqdm.std.tqdm%27&gt;" isContainer="True" />
<var name="train" type="function" qualifier="builtins" value="%3Cfunction train at 0x00000166ADD09D30&gt;" isContainer="True" />
<var name="train_data" type="DataFrame" qualifier="pandas.core.frame" value="Id  Sold Price                Type  Year built  %5C %5B0          0   3825000.0        SingleFamily      1969.0   %5D %5B1          1    505000.0        SingleFamily      1926.0   %5D %5B2          2    140000.0        SingleFamily      1958.0   %5D %5B3          3   1775000.0        SingleFamily      1947.0   %5D %5B4          4   1175000.0          VacantLand         NaN   %5D %5B...      ...         ...                 ...         ...   %5D %5B47434  47434    159000.0        SingleFamily      1965.0   %5D %5B47435  47435    255000.0  MobileManufactured      1999.0   %5D %5B47436  47436   2300000.0        SingleFamily      1919.0   %5D %5B47437  47437    500000.0        SingleFamily      2017.0   %5D %5B47438  47438    760000.0        SingleFamily      1948.0   %5D %5B%5D %5B                                            Heating  %5C%5D %5B0      Heating - 2%2B Zones%2C Central Forced Air - Gas   %5D %5B1                                       Combination   %5D %5B2                                        Forced air   %5D %5B3                                           Central   %5D %5B4   ...%5D" isContainer="True" shape="(47439, 37)" />
<var name="train_features" type="Tensor" qualifier="torch" value="tensor%28%5B%5B 0.0489%2C -5.4084%2C -2.0618%2C  ...%2C  0.0000%2C  0.0000%2C  0.0000%5D%2C%0A        %5B-0.2833%2C -0.4474%2C -0.3371%2C  ...%2C  0.0000%2C  0.0000%2C  0.0000%5D%2C%0A        %5B-0.0361%2C  0.0839%2C  0.5253%2C  ...%2C  0.0000%2C  0.0000%2C  0.0000%5D%2C%0A        ...%2C%0A        %5B-0.3374%2C -0.1135%2C -0.3371%2C  ...%2C  0.0000%2C  0.0000%2C  0.0000%5D%2C%0A        %5B 0.4197%2C -0.1969%2C  0.5253%2C  ...%2C  0.0000%2C  0.0000%2C  0.0000%5D%2C%0A        %5B-0.1133%2C  0.0166%2C -1.1994%2C  ...%2C  0.0000%2C  0.0000%2C  0.0000%5D%5D%29" isContainer="True" shape="(47439, 470)" />
<var name="train_labels" type="Tensor" qualifier="torch" value="tensor%28%5B%5B3825000.%5D%2C%0A        %5B 505000.%5D%2C%0A        %5B 140000.%5D%2C%0A        ...%2C%0A        %5B2300000.%5D%2C%0A        %5B 500000.%5D%2C%0A        %5B 760000.%5D%5D%29" isContainer="True" shape="(47439, 1)" />
<var name="wandb" type="module" qualifier="builtins" value="%3Cmodule %27wandb%27 from %27C%3A%5C%5CUsers%5C%5C19423%5C%5C.conda%5C%5Cenvs%5C%5Cnlp%5C%5Clib%5C%5Csite-packages%5C%5Cwandb%5C%5C__init__.py%27&gt;" isContainer="True" />
<var name="weight_decay" type="float" qualifier="builtins" value="0.05" />
</xml>
train_data and test_data shape (47439, 41) (31626, 40)
Type                 174
Heating              2660
Cooling              911
Parking              9913
Bedrooms             278
Region               1259
Elementary School    3568
Middle School        809
High School          922
Flooring             1740
Heating features     1763
Cooling features     596
Appliances included  11290
Laundry features     3031
Parking features     9695
before one hot code (79065, 19)
after one hot code (79065, 470)
train feature shape: torch.Size([47439, 470])
test feature shape: torch.Size([31626, 470])
train label shape: torch.Size([47439, 1])